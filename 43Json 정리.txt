43.AJax

웹페이지 전체를 랜더링 할 필요없이 변경 할 필요가 있는 부분만
한정적으로 랜더링 하는 방식

Json
데이터 type중 한개

Stringify -> 객체를 문자열로 전환 할때 사용

예시1
  const todos = [
       {id:1, content: 'html', completed:false},
       {id:2, content: 'css', completed: true},
       {id:3, content: 'javascript', completed: false}
   ];

   const json = JSON.stringify(todos,null,2);
   console.log(typeof json, json);
   
JSON.parse
 Json 포맷 형식의 문자열을 객체로 변환
 서버로부터 클라이언트에게 전송된 Json 데이터는 문자열
 이 문자열을 객체로서 사용하려면 Json 포맷의 문자열을 객체화해야 하는데
 이를 역직렬화

예시1


    const todos = [
       {id:1, content: 'html', completed:false},
       {id:2, content: 'css', completed: true},
       {id:3, content: 'javascript', completed: false}
   ];

   const json = JSON.stringify(todos);

   const parsed = JSON.parse(json);
   console.log(typeof parsed, parsed);

 XMLHttpRequest 객체 생성
 --> 객체는 브라우저에서 제공하는 Web API이므로 브라우저 환경에서만 정상적으로 실행
 readystate
 status
 statusText
 responseType
 response
 responseText
 
 HTTP 요청 전송 순서
 XMLHttpRequest.prototype.open 메서드로 http 요청
 필요에 따라 XMLhttpRequest.prototype.setRequestHeader 메서드로 특정 HTTP 요청의 헤더 값을 설정
 XMLHttpRequest.prototype.send메서드로 HTTP요청을 전송한다

 Const xhr = new XMLHttpRequest();
 xhr.open('GET','/users')
 xhr.setRequestHeader('content-type','application/json)
 xhr.send()

 
 

